package com.kuali.codingchallenge;

import java.util.LinkedList;
import java.util.List;

/**
 * Maintains its own state 
 * @author avanisoni
 *
 */
public class Elevator implements Runnable{
	
	
	public static boolean isOccupied;
	
	public static int noOfTrips = 0;
	
	public static int numberOfFloorsPassed=0;
	
	public int currentFloor;
	private Floor destinationFloor;
	
	public List<Floor> destinationFloorList = new LinkedList<Floor>();
	
	int topFloor;
	
	String elevatorId;
	
	public ElevatorState elevatorState;
	
	private ElevatorController elevatorController;
	
	public Elevator(String elevatorId, int topFloor){
		this.elevatorId = elevatorId;
		this.topFloor = topFloor;
	}
	
	public String openDoor(){
		return "Door Open";
	}
	public String closeDoor(){
		return "Door Closing";
	}
	public String reportfloor(Floor floor){
		return "";
	}
	public void countFloor(){
		
	}
	public void countTrips(){
		
	}
	public void answer(){
		
	}
	
	public void reportFloorNumber(int currentFloor){
		this.currentFloor = currentFloor;	
	}
	
	public int getCurrentFloor()
	{
		return this.currentFloor;
	}
	public synchronized void moveUp(){
		if(currentFloor != topFloor){
			currentFloor++;
			reportFloorNumber(currentFloor);
		}
	}
	
	public synchronized void moveDown(){
		if(currentFloor!= 1){
			currentFloor--;
			reportFloorNumber(currentFloor);
		}
		
	}
	
	public boolean isArrived;
	
	
	@Override
	public void run() {
		while(true){
			
			//check elevator state
			//Condition: 
			//Not in maintenance mode && not moving && destination floor is set &&
					if(isArrivedDestination()){
					openDoor();
					
					closeDoor();
					//removeCurrentFloorfromDestinationFloorList();
					}
					
					else {
					//decide whether to move up or down and call moveUp or moveDown
						if(destinationFloor.getFloorNumber() > currentFloor) {
						moveUp();
						}
						if(destinationFloor.getFloorNumber()<currentFloor){
						moveDown();
						}
					}		
			
		}
	
		
	}
	
	public boolean isArrivedDestination()
	{
		if(currentFloor == destinationFloor.getFloorNumber()){
			return true;
		}
		else{
			return false;
		}
			
	}
	public synchronized void addDestination(int destinationFloorNumber) {
		destinationFloorList.add(new Floor(destinationFloorNumber));
	}
	
	public void setElevatorController(ElevatorController controller){
		this.elevatorController = controller;
	}
	

}
